  #
  # Global window hooks
  #

hook global WinCreate ^[^*]+$ %{
  # Show line numbers
  addhl number_lines
  # Show matching brackets
  addhl show_matching
  # Show whitespace characters
  addhl show_whitespaces
  # Use editorconfig
  editorconfig-load
}

  #
  # Basic Settings
  #

# Use # to comment lines
map global normal '#' :comment-line<ret>
# Scroll offset
set-option global scrolloff 5,0
# Colors
colorscheme lucius
face Whitespace rgb:555555
# Turn off autocomplete
set global completers ""

  #
  # Key Bindings
  #

# Undo shows history number
#map global normal u <a-u>
# Redo shows history number
#map global normal U <a-U>

  #
  # User key bindings
  #

# ,l changes line preserving whitespace
map global user l I<esc><a-l>c
# ,y to yank to clipboard
map global user y '<a-|>pbcopy<ret>'
# ,p to paste from clipboard without auto-indent
map global user p '<a-!>pbpaste<ret>'

  #
  # Hooks
  #

# Use jk to exit normal mode
hook global InsertChar k %{ try %{
  exec -draft hH <a-k>jk<ret> d
  exec <esc>
}}


  #
  # Commands
  #

# Show trailing whitespace
hook -group TrailingWhitespaces global WinCreate .* %{
    addhl regex '\h+$' 0:default,red
}


  #
  # FZF integration
  #

def -docstring 'invoke fzf to open a file' \
  ok %{ %sh{
    if [ -z "$TMUX" ]; then
      echo echo only works inside tmux
    else
      FILE=$( find . -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null | sed s/^..// | fzf-tmux -d 15)
      # FILE=$(ls -1 | fzf-tmux -d 15)
      if [ -n "$FILE" ]; then
        printf 'eval -client %%{%s} edit %%{%s}\n' "${kak_client}" "${FILE}" | kak -p "${kak_session}"
      fi
    fi
}}

def -docstring 'invoke fzf to select a buffer' \
  ob %{ %sh{
    if [ -z "$TMUX" ]; then
      echo echo only works inside tmux
    else
      BUFFER=`echo ${kak_buflist} | tr : '\n' | fzf-tmux -d 15`
      if [ -n "$BUFFER" ]; then
        echo "eval -client '$kak_client' 'buffer ${BUFFER}'" | kak -p ${kak_session}
      fi
    fi
}}

